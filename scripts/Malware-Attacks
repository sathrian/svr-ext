#!/bin/bash
#
# Automated Attacks and malicious traffic script
#
# Version 04.30.2020a
# Bill Claunch
# Palo Alto Networks
# For use in Palo Alto Network classes only.
# The first section pulls the API key from firewall-a and uses as a variable for the rest
# of the script.
#
# The second section uploads a user ID list to firewall-A through the XML
# api.
#
# Then the script uses curl and nslookup to trigger custom signatures for
# vulnerabilities and spyware. Creating these custom signatures is documented
# in the Linux Server Usage Guide.
#
# The script also replays pcap files that trigger other spyware and vulnerability
# signatures from Dynamic Content files from March 2019.
#
# These pcaps are generated from ens-224 on the server which is attached to one
# side of a vWire on Firewall-A. Use the basic-config-1.xml file to load the
# applicable configuration for testing and class labs.
#
# Updating any Dynamic Content signatures on the firewall will most likely change
# the outcome of this script.
#
# The script is run under the paloalto42 user account. This account has sudoers permission
# to execute all commands without being prompted for a password.
#
####################################################
# This section is for testing.
# Comment out these commands when testing is complete
#
#
# echo "Malware script started at "$(date) >> /home/paloalto42/Script.Ran.txt
####################################################
#

clear
######################################################################################################
# Get Key from Firewall-A and write to Akeyfile.txt
######################################################################################################
clear
echo "Get API key for Firewall-A"
echo ""
curl -k -X GET "https://192.168.1.254/api/?type=keygen&user=admin&password=Pal0Alt0!" >Akeyfile.txt
                # clean up extraneous characters in API response to leave only key
                # Remove > characters 
                sed --in-place "s/>/ /g" Akeyfile.txt
                # Remove < characters
                sed --in-place "s/</ /g" Akeyfile.txt
                # Remove single quotes
                sed --in-place "s/'/ /g" Akeyfile.txt
                # Remove extraneous text before key
                sed --in-place 's/ response status =  success   result  key //g' Akeyfile.txt
                # Remove slashes
                sed --in-place 's/\///g' Akeyfile.txt
                # Remove extraneous text after key
                sed --in-place 's/ key  result  response //g' Akeyfile.txt
#                echo "Your key is below:"
#                echo ""
#                cat Akeyfile.txt
#                echo ""
#                echo ""
#                echo "The key is also stored in the current directory as " Akeyfile.txt
#                echo ""
#                echo -n "Press enter to proceed"
echo "Done."
######################################################################################################
# Read Akeyfile.txt into variable.
######################################################################################################
# read API key for FirewallA from Akeyfile.txt into variable
                tempkeyA=`cat Akeyfile.txt`
######################################################################################################
echo ""
echo "Sending User-ID information to firewall-a"
echo ""
sudo curl -k -F key=$tempkeyA --form file=@/home/paloalto42/userID/Ausers.xml "https://192.168.50.1/api/?type=user-id" > /home/paloalto42/empty.txt
echo ""
echo "Process Complete."
echo ""
rm /home/paloalto42/empty*
starttime=$SECONDS
echo "Running simulated attack traffic..."
echo ""
echo "-- THIS WILL TAKE A FEW MINUTES --"
echo ""
echo ""
echo "Running pcap Trickbot-1"
echo ""
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Trickbot1.pcap
echo ". . . GENERATING TRAFFIC"
echo ""
echo "Running pcap Trickbot-2"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Trickbot2.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap bredolab.pcapng"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/bredolab-c2.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Emotet.pcapng"
echo ""
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Emotet.pcapng
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Fake-updates.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Fake-updates.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Gootkit"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Gootkit.pcapng
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap IcedID1.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/IcedID1.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap IcedID2.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/IcedID2.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Hancitor.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Hancitor2.pcapng
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Necurs.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Necurs.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Neutrino.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Neutrino.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Terror_EK"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Terror_EK.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Terror-EK-traffic.pcap"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Terror-EK-traffic.pcap
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap pcap9_anon.pcapng"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/pcap9_anon.pcapng
echo ". . . GENERATING TRAFFIC "
echo ""
echo "Running pcap Ursnif.pcapng"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/Ursnif.pcapng
echo ". . . GENERATING TRAFFIC"
echo ""
echo "Running pcap attacks18.pcapng"
sudo tcpreplay --intf1=ens224 --pps=350 /home/paloalto42/pcaps92019/attack.pcaps/attacks18.pcapng
echo "Process complete!"
echo ""
echo "Check the Threat Log on firewall to see results."
# echo "Malware script completed at "$(date) >> /home/paloalto42/pcaps82019/Script.Ran.txt
endtime=$SECONDS
elapsedtime=$(( endtime - starttime ))
echo "This script took " $elapsedtime "seconds to run."
echo ""
